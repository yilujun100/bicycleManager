{"version":3,"sources":["components/Header/index.js","components/Footer/index.js","config/menuConfig.js","components/NavLeft/index.js","admin.js","serviceWorker.js","index.js"],"names":["Header","React","Component","Footer","menuList","title","key","children","btnList","SubMenu","NavLeft","renderMenu","data","map","item","Item","menuTreeNode","this","MenuConfig","setState","className","src","alt","theme","state","Admin","span","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mOAEqBA,E,uKAEb,OACI,mD,GAHwBC,IAAMC,WCArBC,E,uKAEb,OACI,mD,GAHwBF,IAAMC,W,iBC2H3BE,EA7HE,CACb,CACIC,MAAO,eACPC,IAAK,SAET,CACID,MAAO,KACPC,IAAK,MACLC,SAAU,CACN,CACIF,MAAO,eACPC,IAAK,eAET,CACID,MAAO,eACPC,IAAK,cAET,CACID,MAAO,UACPC,IAAK,gBAET,CACID,MAAO,2BACPC,IAAK,oBAET,CACID,MAAO,sBACPC,IAAK,gBAET,CACID,MAAO,kBACPC,IAAK,YAET,CACID,MAAO,2BACPC,IAAK,eAET,CACID,MAAO,qBACPC,IAAK,kBAIjB,CACID,MAAO,eACPC,IAAK,QACLC,SAAU,CACN,CACIF,MAAO,eACPC,IAAK,eAET,CACID,MAAO,eACPC,IAAK,eAIjB,CACID,MAAO,eACPC,IAAK,SACLC,SAAU,CACN,CACIF,MAAO,2BACPC,IAAK,gBAET,CACID,MAAO,2BACPC,IAAK,iBAIjB,CACID,MAAO,qBACPC,IAAK,SAET,CACID,MAAO,2BACPC,IAAK,SAET,CACID,MAAO,2BACPC,IAAK,SACLE,QAAS,CACL,CACIH,MAAO,2BACPC,IAAK,UAET,CACID,MAAO,2BACPC,IAAK,YAIjB,CACID,MAAO,2BACPC,IAAK,SAET,CACID,MAAO,2BACPC,IAAK,YAET,CACID,MAAO,eACPC,IAAK,UACLC,SAAU,CACN,CACIF,MAAO,qBACPC,IAAK,eAET,CACID,MAAO,eACPC,IAAK,eAET,CACID,MAAO,qBACPC,IAAK,kBAIjB,CACID,MAAO,2BACPC,IAAK,gBCpHLG,G,UAAAA,SAEaC,E,4MAUjBC,WAAa,SAAAC,GACT,OAAOA,EAAKC,KAAI,SAAAC,GACZ,OAAIA,EAAKP,SAED,kBAACE,EAAD,CAASJ,MAAOS,EAAKT,MAAOC,IAAKQ,EAAKR,KAChC,EAAKK,WAAWG,EAAKP,WAI5B,sBAAMQ,KAAN,CAAWV,MAAOS,EAAKT,MAAOC,IAAKQ,EAAKR,KACzCQ,EAAKT,W,mEAlBf,IAAMW,EAAeC,KAAKN,WAAWO,GAErCD,KAAKE,SAAS,CACVH,mB,+BAqBJ,OACI,6BACI,yBAAKI,UAAU,QACX,yBAAKC,IAAI,uBAAuBC,IAAI,KACpC,2CAEJ,uBACIC,MAAM,QAEJN,KAAKO,MAAMR,mB,GAnCIf,IAAMC,WCAtBuB,G,6KAEb,OACI,uBAAKL,UAAU,aACX,uBAAKM,KAAM,EAAGN,UAAU,YACpB,kBAAC,EAAD,OAEJ,uBAAKM,KAAM,GAAIN,UAAU,QACrB,kBAAC,EAAD,MACA,uBAAKA,UAAU,WAAf,WAGA,kBAAC,EAAD,Y,GAZenB,IAAMC,YCKrByB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KAGE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.e6950377.chunk.js","sourcesContent":["import React from 'react';\n\nexport default class Header extends React.Component {\n    render() {\n        return (\n            <div>\n                This is Header\n            </div>\n        );\n    }\n};","import React from 'react';\n\nexport default class Footer extends React.Component {\n    render() {\n        return (\n            <div>\n                This is Footer\n            </div>\n        );\n    }\n};","const menuList = [\n    {\n        title: '首页',\n        key: '/home'\n    },\n    {\n        title: 'UI',\n        key: '/ui',\n        children: [\n            {\n                title: '按钮',\n                key: '/ui/buttons'\n            },\n            {\n                title: '弹框',\n                key: '/ui/modals'\n            },\n            {\n                title: 'Loading',\n                key: '/ui/loadings'\n            },\n            {\n                title: '通知提醒',\n                key: '/ui/notification'\n            },\n            {\n                title: '全局Message',\n                key: '/ui/messages'\n            },\n            {\n                title: 'Tab页签',\n                key: '/ui/tabs'\n            },\n            {\n                title: '图片画廊',\n                key: '/ui/gallery'\n            },\n            {\n                title: '轮播图',\n                key: '/ui/carousel'\n            }\n        ]\n    },\n    {\n        title: '表单',\n        key: '/form',\n        children: [\n            {\n                title: '登录',\n                key: '/form/login'\n            },\n            {\n                title: '注册',\n                key: '/form/reg'\n            }\n        ]\n    },\n    {\n        title: '表格',\n        key: '/table',\n        children: [\n            {\n                title: '基础表格',\n                key: '/table/basic'\n            },\n            {\n                title: '高级表格',\n                key: '/table/high'\n            }\n        ]\n    },\n    {\n        title: '富文本',\n        key: '/rich'\n    },\n    {\n        title: '城市管理',\n        key: '/city'\n    },\n    {\n        title: '订单管理',\n        key: '/order',\n        btnList: [\n            {\n                title: '订单详情',\n                key: 'detail'\n            },\n            {\n                title: '结束订单',\n                key: 'finish'\n            }\n        ]\n    },\n    {\n        title: '员工管理',\n        key: '/user'\n    },\n    {\n        title: '车辆地图',\n        key: '/bikeMap'\n    },\n    {\n        title: '图表',\n        key: '/charts',\n        children: [\n            {\n                title: '柱形图',\n                key: '/charts/bar'\n            },\n            {\n                title: '饼图',\n                key: '/charts/pie'\n            },\n            {\n                title: '折线图',\n                key: '/charts/line'\n            }\n        ]\n    },\n    {\n        title: '权限设置',\n        key: '/permission'\n    }\n];\n\nexport default menuList;","import React from 'react';\nimport { Menu } from 'antd';\nimport MenuConfig from './../../config/menuConfig';\nimport './index.less';\n\nconst { SubMenu } = Menu;\n\nexport default class NavLeft extends React.Component {\n    componentWillMount() {\n        const menuTreeNode = this.renderMenu(MenuConfig);\n\n        this.setState({\n            menuTreeNode\n        });\n    }\n\n    // 菜单渲染\n    renderMenu = data => {\n        return data.map(item => {\n            if (item.children) {\n                return (\n                    <SubMenu title={item.title} key={item.key}>\n                        { this.renderMenu(item.children) }\n                    </SubMenu>\n                );\n            }\n            return <Menu.Item title={item.title} key={item.key}>\n                { item.title }\n            </Menu.Item>;\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                <div className=\"logo\">\n                    <img src=\"/assets/logo-ant.svg\" alt=\"\" />\n                    <h1>Bicycle MS</h1>\n                </div>\n                <Menu\n                    theme=\"dark\"\n                >\n                    { this.state.menuTreeNode }\n                </Menu>\n            </div>\n        );\n    }\n};\n","import React from 'react';\nimport { Row, Col } from 'antd';\nimport Header from './components/Header';\nimport Footer from './components/Footer';\nimport NavLeft from './components/NavLeft';\nimport './styles/common.less';\n\nexport default class Admin extends React.Component {\n    render() {\n        return (\n            <Row className=\"container\">\n                <Col span={3} className=\"nav-left\">\n                    <NavLeft />\n                </Col>\n                <Col span={21} className=\"main\">\n                    <Header />\n                    <Row className=\"content\">\n                        content\n                    </Row>\n                    <Footer />\n                </Col>\n            </Row>\n        );\n    }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import App from './App';\n// import Jsx from './demos/Jsx';\n// import Life from './pages/demos/Life';\nimport Admin from './admin';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    {/* <Jsx title=\"课程列表\" /> */}\n    {/* <Life /> */}\n    <Admin />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}